Terraform Configuration
------------------------

Terraform Block - Used for configuring the terraform project (backend, providers, required versions)

terraform {                                        version constraints
  required_version = "1.7.0"                     = : allows only the specified version
                                                 ! : excludes an exact version
  backend "s3" {                                 >=, <= > , < : allow versions for which comparison is true.
    //....                                        ~> : allows only the righmost digit to increment. (so when we specify ~> 5.33.0 then we can use 5.33.10 not 5.34.0 only the rightmost digit can change.)
  }

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~>5.33.0"
    }
  }
}

=> Only constants are allowed in the terraform bock. Input variables or resource references are not allowed.
=> cloud block is used to configure teh terraform cloud.
=> backend block : Used to configure a state backend for the project.
=> required_version key is used to specify the accepted version of terraform for the current project.
=> required_providers block specifies the required proiders for the current project or module, including their accepted versions.
    here we are providing AWS 


Terraform state
-----------------
=> Terraform state maps resources from the configuration files to real-world objects.

primary goals is to conatain 
                    resource configuration 
                    bindings b/w this resource configurations and real world infrastructure .
                    meta data


=> It also contains 
* backend configuration
* outputs generated by project
* sensitive values

=> Before planning operation. Terraform refreshes the state with the information from the perspective of real-world object.
 This is needed to avoid configuration drift. If a real-world object has been modified outside of Terraforom and the respective configuration has not been upated. Terraform will rever the changes.


Backends
========
=> Backends define where terraform store its state file.
=> There are multiple types of backend which we can plane into 3 categories.
*Local - The state file is stored in local machine
*Terraform cloud - the state file is stored in terraform cloud.
*Third party backend: the state file is stored in a remote backend from terraform cloud (s3, google cloud storage, Azure resource manager)

different backends offer different functionalities. a terraform configuration can provide only one backend.
backend block cannot use input variables, resource references and data sources. When changes are made to the configured backend we must rerun the terraform init command.

backend "s3" {
    bucket = "sesank-backend-bucket"
    key = "state.tfstate"
    region = "us-east-1"  // location to store the backend file inside the s3 bucket.
  }
whenever we want to change something in the terraform backend and run the terraform init again we will get an error sying the backend is changed.
we have to run the command terraform init -migrate-state


providers
=========
=> Providers are how Terraform interact with remote APIs and Platforms.
=> Terraform core by default is unable to create resources in AWS, Azure APIs.
=> It needs to have knowledge of the respective provider so it can use this provider to interact with APIs.

Providers are developed and maintained seperately from terraform. They fit into terraform plugin architecture.

alias
------
=> We can also use multiple regions and assign aliases to them to set up the infrastructure.
=> If we don't use an alias then the first region is the default region.
ex:
terraform {
  required_version = "~> 1.0"
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-east-1"
  alias = "us-east"
}

provider "aws" {
  region = "us-east-2"
  alias = "us-et" //aliasing the region
}

resource "aws_s3_bucket" "my_bucket" {
  bucket = "some-random-bucket-name-sdasdnsakndknkjs"
  provider = aws.us-et  // referencing the us-east-2 region.
}
